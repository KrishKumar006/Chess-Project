import chess
import chess.pgn
import chess.engine
import io
import math

STOCKFISH_PATH = r"STOCKFISH PATH HERE"

def compute_drama_from_pgn(pgn_string, time_limit=0.5):
    game = chess.pgn.read_game(io.StringIO(pgn_string.strip()))
    board = game.board()
    engine = chess.engine.SimpleEngine.popen_uci(STOCKFISH_PATH)

    esi = 0
    lead_changes = 0
    prev_eval = None
    prev_sign = None  # Use None instead of 0 to distinguish "unset"

    moves = list(game.mainline_moves())

    for move in moves:
        board.push(move)
        info = engine.analyse(board, chess.engine.Limit(time=time_limit))
        score = info["score"].relative

        # Skip mate evaluations
        if score.is_mate():
            break

        cp = score.score()
        current_sign = 1 if cp > 0 else (-1 if cp < 0 else 0)

        if prev_eval is not None:
            swing = abs(cp - prev_eval)

            # Only count swing in ESI if it crosses 0 and is large
            if (
                swing >= 400 and
                prev_sign is not None and
                current_sign != 0 and
                current_sign != prev_sign
            ):
                esi += swing

            # Count lead change
            if (
                prev_sign is not None and
                current_sign != 0 and
                current_sign != prev_sign
            ):
                lead_changes += 1

        prev_eval = cp
        prev_sign = current_sign

    engine.quit()

    drama = 10 * math.sqrt(esi) + 5 * lead_changes
    return drama


if __name__ == "__main__":
    pgn = """
[Event "Candidates SF"]
[Site "Leningrad URS"]
[Date "1974.04.11"]
[Round "6"]
[White "Anatoly Karpov"]
[Black "Boris Spassky"]
[Result "1-0"]
[ECO "C69"]
[WhiteElo ""]
[BlackElo ""]
[TimeControl "40/150:20/60:SD/"]
[Termination "Normal"]

1. e4 e5 2. Nf3 Nc6 3. Bb5 a6 4. Ba4 Nf6 5. O-O Be7 6. Re1 b5 7. Bb3 d6 8. c3 O-O 
9. h3 Nb8 10. d4 Nbd7 11. Nbd2 Bb7 12. Bc2 Re8 13. Nf1 Bf8 14. Ng3 g6 15. a4 c5 
16. d5 c4 17. Be3 Qc7 18. Qd2 Nc5 19. Bh6 Be7 20. Rf1 Reb8 21. Nh2 Bc8 22. f4 exf4 
23. Qxf4 Qd8 24. Nf3 bxa4 25. e5 dxe5 26. Nxe5 Rxb2 27. Nc6 Qd6 28. Nxe7+ Qxe7 
29. Rae1 Qd8 30. Bg5 Rxc2 31. Bxf6 Qf8 32. Be7 Nd3 33. Qf6 Qg7 34. Qc6 Rb8 
35. Qe8+ Qf8 36. Bxf8 Bxh3 37. Bh6+ Rxe8 38. Rxe8#
1-0
"""

    drama_score = compute_drama_from_pgn(pgn, time_limit=0.5)
    print(f"Drama score for PGN: {drama_score:.2f}")
