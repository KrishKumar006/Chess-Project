import chess
import chess.pgn
import chess.engine

STOCKFISH_PATH = r"YOUR PATH HERE"
OUTPUT_FILE = "pgns.txt"
NUM_GAMES = 5
MAX_MOVES = 200

def simulate_game(game_num):
    board = chess.Board()
    game = chess.pgn.Game()
    game.headers["Event"] = f"Game {game_num}"
    game.headers["White"] = "Stockfish_White"
    game.headers["Black"] = "Stockfish_Black"

    node = game

    with chess.engine.SimpleEngine.popen_uci(STOCKFISH_PATH) as engine_white, \
         chess.engine.SimpleEngine.popen_uci(STOCKFISH_PATH) as engine_black:

        while not board.is_game_over() and board.fullmove_number <= MAX_MOVES:
            if board.turn == chess.WHITE:
                result = engine_white.play(board, chess.engine.Limit(time=0.2))
            else:
                result = engine_black.play(board, chess.engine.Limit(time=0.2))
            move = result.move
            board.push(move)
            node = node.add_variation(move)

        game.headers["Result"] = board.result()

        exporter = chess.pgn.StringExporter(headers=True, variations=False, comments=False)
        pgn_string = game.accept(exporter)

        lines = pgn_string.strip().split("\n")
        headers = [line for line in lines if line.startswith("[")]
        moves = [line for line in lines if not line.startswith("[")]
        move_line = " ".join(moves).strip()
        return "\n".join(headers) + "\n" + move_line

def generate_games():
    games = []
    for i in range(1, NUM_GAMES + 1):
        print(f"Simulating Game {i}...")
        game_text = simulate_game(i)
        if game_text:
            games.append(game_text)

    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write("\n\n".join(games))

    print(f"\nSaved {len(games)} games to {OUTPUT_FILE}")

if __name__ == "__main__":
    generate_games()
